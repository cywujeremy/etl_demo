# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_load.ipynb (unless otherwise specified).

__all__ = ['database_connector', 'series_to_tuple_like_string', 'ACS_Blockgroup_Data_Loader', 'database_connector',
           'series_to_tuple_like_string', 'ACS_Blockgroup_Data_Loader']

# Cell
import os
os.chdir('../')
os.getcwd()

# Cell
from nbdev.showdoc import *
from .acs import ACS_Blockgroup_Data_Pull
import numpy as np
import pandas as pd
import psycopg2
import re

# Cell
def database_connector(func):
    def with_connection(*args, **kwargs):

        conn = psycopg2.connect(
            host='acs-db.mlpolicylab.dssg.io',
            database='acs_data_loading',
            user='mlpp_student',
            password='CARE-horse-most')
        cur = conn.cursor()

        try:
            func(*args, cur, **kwargs)
            conn.commit()

        except Exception as e:
            print(e)

        finally:
            cur.close()
            conn.close()

    return with_connection

# Cell
def series_to_tuple_like_string(series):
    '''Transform a pandas series into a tuple-like string to fit in SQL queries.
    '''
    string = '('
    for item in series:
        if not re.match(r'^[0-9]+$', str(item)):
            string = string + "'" + str(item) + "'" + ','
        else:
            string = string + str(item) + ','
    string = string.strip(',') + ')'
    return string

# Cell
class ACS_Blockgroup_Data_Loader:

    def __init__(self, df, db_dict, schema, table):
        self.df: pd.DataFrame = df
        self.db_dict: dict = db_dict
        self.schema: str = schema
        self.table: str = table

        self.host = db_dict['host']
        self.database = db_dict['database']
        self.user = db_dict['user']
        self.password = db_dict['password']

    @database_connector
    def create_table(self, cur):
        '''Create a table with the specified name.
        '''
        cur.execute(f"CREATE TABLE acs.{self.table} (\
                     state_id INTEGER,\
                     state VARCHAR(4),\
                     county_id INTEGER,\
                     county VARCHAR(40),\
                     blockgroup INTEGER,\
                     tract INTEGER,\
                     total_population NUMERIC,\
                     median_age NUMERIC,\
                     per_capita_income NUMERIC,\
                     median_rent_to_household_income NUMERIC,\
                     avg_household_size NUMERIC,\
                     NAME VARCHAR(100)\
                   )")

    @database_connector
    def insert_data(self, cur):
        '''Insert rows in df into the specified table.
        '''
        for i, row in self.df.iterrows():
            row_string = series_to_tuple_like_string(row)
            cur.execute(f"INSERT INTO acs.{self.table} VALUES {row_string}")


# Cell
import os
os.chdir('../')
os.getcwd()

# Cell
from nbdev.showdoc import *
from .acs import ACS_Blockgroup_Data_Pull
import numpy as np
import pandas as pd
import psycopg2
import re

# Cell
def database_connector(func):
    def with_connection(*args, **kwargs):

        conn = psycopg2.connect(
            host='acs-db.mlpolicylab.dssg.io',
            database='acs_data_loading',
            user='mlpp_student',
            password='CARE-horse-most')
        cur = conn.cursor()

        try:
            func(*args, cur, **kwargs)
            conn.commit()

        except Exception as e:
            print(e)

        finally:
            cur.close()
            conn.close()

    return with_connection

# Cell
def series_to_tuple_like_string(series):
    '''Transform a pandas series into a tuple-like string to fit in SQL queries.
    '''
    string = '('
    for item in series:
        if not re.match(r'^[0-9]+$', str(item)):
            string = string + "'" + str(item) + "'" + ','
        else:
            string = string + str(item) + ','
    string = string.strip(',') + ')'
    return string

# Cell
class ACS_Blockgroup_Data_Loader:

    def __init__(self, df, db_dict, schema, table):
        self.df: pd.DataFrame = df
        self.db_dict: dict = db_dict
        self.schema: str = schema
        self.table: str = table

        self.host = db_dict['host']
        self.database = db_dict['database']
        self.user = db_dict['user']
        self.password = db_dict['password']

    @database_connector
    def create_table(self, cur):
        '''Create a table with the specified name.
        '''
        cur.execute(f"CREATE TABLE acs.{self.table} (\
                     state_id INTEGER,\
                     state VARCHAR(4),\
                     county_id INTEGER,\
                     county VARCHAR(40),\
                     blockgroup INTEGER,\
                     tract INTEGER,\
                     total_population NUMERIC,\
                     median_age NUMERIC,\
                     per_capita_income NUMERIC,\
                     median_rent_to_household_income NUMERIC,\
                     avg_household_size NUMERIC,\
                     NAME VARCHAR(100)\
                   )")

    @database_connector
    def insert_data(self, cur):
        '''Insert rows in df into the specified table.
        '''
        for i, row in self.df.iterrows():
            row_string = series_to_tuple_like_string(row)
            cur.execute(f"INSERT INTO acs.{self.table} VALUES {row_string}")
